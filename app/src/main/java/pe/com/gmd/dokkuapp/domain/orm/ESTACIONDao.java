package pe.com.gmd.dokkuapp.domain.orm;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pe.com.gmd.dokkuapp.domain.orm.ESTACION;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ESTACION".
*/
public class ESTACIONDao extends AbstractDao<ESTACION, Long> {

    public static final String TABLENAME = "ESTACION";

    /**
     * Properties of entity ESTACION.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property Direcion = new Property(2, String.class, "Direcion", false, "DIRECION");
        public final static Property Descripcion = new Property(3, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Texto = new Property(4, String.class, "Texto", false, "TEXTO");
        public final static Property Latitud = new Property(5, Double.class, "Latitud", false, "LATITUD");
        public final static Property Longitud = new Property(6, Double.class, "Longitud", false, "LONGITUD");
        public final static Property Foto = new Property(7, Integer.class, "Foto", false, "FOTO");
        public final static Property Modulo = new Property(8, Boolean.class, "modulo", false, "MODULO");
        public final static Property Estado = new Property(9, Boolean.class, "Estado", false, "ESTADO");
        public final static Property Tipo_id = new Property(10, long.class, "tipo_id", false, "TIPO_ID");
    };

    private DaoSession daoSession;

    private Query<ESTACION> tIPO_Fk_estacionesQuery;

    public ESTACIONDao(DaoConfig config) {
        super(config);
    }
    
    public ESTACIONDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ESTACION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: Nombre
                "\"DIRECION\" TEXT," + // 2: Direcion
                "\"DESCRIPCION\" TEXT," + // 3: Descripcion
                "\"TEXTO\" TEXT," + // 4: Texto
                "\"LATITUD\" REAL," + // 5: Latitud
                "\"LONGITUD\" REAL," + // 6: Longitud
                "\"FOTO\" INTEGER," + // 7: Foto
                "\"MODULO\" INTEGER," + // 8: modulo
                "\"ESTADO\" INTEGER," + // 9: Estado
                "\"TIPO_ID\" INTEGER NOT NULL );"); // 10: tipo_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ESTACION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ESTACION entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        String Direcion = entity.getDirecion();
        if (Direcion != null) {
            stmt.bindString(3, Direcion);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(4, Descripcion);
        }
 
        String Texto = entity.getTexto();
        if (Texto != null) {
            stmt.bindString(5, Texto);
        }
 
        Double Latitud = entity.getLatitud();
        if (Latitud != null) {
            stmt.bindDouble(6, Latitud);
        }
 
        Double Longitud = entity.getLongitud();
        if (Longitud != null) {
            stmt.bindDouble(7, Longitud);
        }
 
        Integer Foto = entity.getFoto();
        if (Foto != null) {
            stmt.bindLong(8, Foto);
        }
 
        Boolean modulo = entity.getModulo();
        if (modulo != null) {
            stmt.bindLong(9, modulo ? 1L: 0L);
        }
 
        Boolean Estado = entity.getEstado();
        if (Estado != null) {
            stmt.bindLong(10, Estado ? 1L: 0L);
        }
        stmt.bindLong(11, entity.getTipo_id());
    }

    @Override
    protected void attachEntity(ESTACION entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ESTACION readEntity(Cursor cursor, int offset) {
        ESTACION entity = new ESTACION( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Direcion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Descripcion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Texto
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Latitud
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // Longitud
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Foto
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // modulo
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // Estado
            cursor.getLong(offset + 10) // tipo_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ESTACION entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDirecion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTexto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLongitud(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setFoto(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setModulo(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setEstado(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTipo_id(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ESTACION entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ESTACION entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fk_estaciones" to-many relationship of TIPO. */
    public List<ESTACION> _queryTIPO_Fk_estaciones(long tipo_id) {
        synchronized (this) {
            if (tIPO_Fk_estacionesQuery == null) {
                QueryBuilder<ESTACION> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Tipo_id.eq(null));
                tIPO_Fk_estacionesQuery = queryBuilder.build();
            }
        }
        Query<ESTACION> query = tIPO_Fk_estacionesQuery.forCurrentThread();
        query.setParameter(0, tipo_id);
        return query.list();
    }

}
