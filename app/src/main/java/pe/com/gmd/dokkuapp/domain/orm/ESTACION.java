package pe.com.gmd.dokkuapp.domain.orm;

import java.util.List;
import pe.com.gmd.dokkuapp.domain.orm.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ESTACION".
 */
public class ESTACION {

    private Long id;
    private String Nombre;
    private String Direcion;
    private String Descripcion;
    private String Texto;
    private String Latitud;
    private String Longitud;
    private String Foto;
    private Boolean modulo;
    private Boolean Estado;
    private long tipo_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ESTACIONDao myDao;

    private List<DETALLE_RUTA> fk_embarque;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ESTACION() {
    }

    public ESTACION(Long id) {
        this.id = id;
    }

    public ESTACION(Long id, String Nombre, String Direcion, String Descripcion, String Texto, String Latitud, String Longitud, String Foto, Boolean modulo, Boolean Estado, long tipo_id) {
        this.id = id;
        this.Nombre = Nombre;
        this.Direcion = Direcion;
        this.Descripcion = Descripcion;
        this.Texto = Texto;
        this.Latitud = Latitud;
        this.Longitud = Longitud;
        this.Foto = Foto;
        this.modulo = modulo;
        this.Estado = Estado;
        this.tipo_id = tipo_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getESTACIONDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return Nombre;
    }

    public void setNombre(String Nombre) {
        this.Nombre = Nombre;
    }

    public String getDirecion() {
        return Direcion;
    }

    public void setDirecion(String Direcion) {
        this.Direcion = Direcion;
    }

    public String getDescripcion() {
        return Descripcion;
    }

    public void setDescripcion(String Descripcion) {
        this.Descripcion = Descripcion;
    }

    public String getTexto() {
        return Texto;
    }

    public void setTexto(String Texto) {
        this.Texto = Texto;
    }

    public String getLatitud() {
        return Latitud;
    }

    public void setLatitud(String Latitud) {
        this.Latitud = Latitud;
    }

    public String getLongitud() {
        return Longitud;
    }

    public void setLongitud(String Longitud) {
        this.Longitud = Longitud;
    }

    public String getFoto() {
        return Foto;
    }

    public void setFoto(String Foto) {
        this.Foto = Foto;
    }

    public Boolean getModulo() {
        return modulo;
    }

    public void setModulo(Boolean modulo) {
        this.modulo = modulo;
    }

    public Boolean getEstado() {
        return Estado;
    }

    public void setEstado(Boolean Estado) {
        this.Estado = Estado;
    }

    public long getTipo_id() {
        return tipo_id;
    }

    public void setTipo_id(long tipo_id) {
        this.tipo_id = tipo_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DETALLE_RUTA> getFk_embarque() {
        if (fk_embarque == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DETALLE_RUTADao targetDao = daoSession.getDETALLE_RUTADao();
            List<DETALLE_RUTA> fk_embarqueNew = targetDao._queryESTACION_Fk_embarque(id);
            synchronized (this) {
                if(fk_embarque == null) {
                    fk_embarque = fk_embarqueNew;
                }
            }
        }
        return fk_embarque;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_embarque() {
        fk_embarque = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
