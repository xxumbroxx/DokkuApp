package pe.com.gmd.dokkuapp.domain.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pe.com.gmd.dokkuapp.domain.orm.NOTIFICACION;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICACION".
*/
public class NOTIFICACIONDao extends AbstractDao<NOTIFICACION, Long> {

    public static final String TABLENAME = "NOTIFICACION";

    /**
     * Properties of entity NOTIFICACION.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titulo = new Property(1, String.class, "Titulo", false, "TITULO");
        public final static Property Tipo = new Property(2, String.class, "Tipo", false, "TIPO");
        public final static Property Descripcion = new Property(3, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Estado = new Property(4, Boolean.class, "Estado", false, "ESTADO");
    };


    public NOTIFICACIONDao(DaoConfig config) {
        super(config);
    }
    
    public NOTIFICACIONDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICACION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITULO\" TEXT," + // 1: Titulo
                "\"TIPO\" TEXT," + // 2: Tipo
                "\"DESCRIPCION\" TEXT," + // 3: Descripcion
                "\"ESTADO\" INTEGER);"); // 4: Estado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICACION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NOTIFICACION entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Titulo = entity.getTitulo();
        if (Titulo != null) {
            stmt.bindString(2, Titulo);
        }
 
        String Tipo = entity.getTipo();
        if (Tipo != null) {
            stmt.bindString(3, Tipo);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(4, Descripcion);
        }
 
        Boolean Estado = entity.getEstado();
        if (Estado != null) {
            stmt.bindLong(5, Estado ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NOTIFICACION readEntity(Cursor cursor, int offset) {
        NOTIFICACION entity = new NOTIFICACION( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Titulo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Tipo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Descripcion
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // Estado
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NOTIFICACION entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitulo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTipo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEstado(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NOTIFICACION entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NOTIFICACION entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
