package pe.com.gmd.dokkuapp.domain.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pe.com.gmd.dokkuapp.domain.orm.TIPO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIPO".
*/
public class TIPODao extends AbstractDao<TIPO, Long> {

    public static final String TABLENAME = "TIPO";

    /**
     * Properties of entity TIPO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdTipo = new Property(1, String.class, "IdTipo", false, "ID_TIPO");
        public final static Property Color = new Property(2, String.class, "Color", false, "COLOR");
        public final static Property Icono = new Property(3, String.class, "Icono", false, "ICONO");
        public final static Property Nombre = new Property(4, String.class, "Nombre", false, "NOMBRE");
        public final static Property Texto = new Property(5, String.class, "Texto", false, "TEXTO");
        public final static Property TipoPago = new Property(6, String.class, "TipoPago", false, "TIPO_PAGO");
    };

    private DaoSession daoSession;


    public TIPODao(DaoConfig config) {
        super(config);
    }
    
    public TIPODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIPO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_TIPO\" TEXT NOT NULL ," + // 1: IdTipo
                "\"COLOR\" TEXT," + // 2: Color
                "\"ICONO\" TEXT," + // 3: Icono
                "\"NOMBRE\" TEXT," + // 4: Nombre
                "\"TEXTO\" TEXT," + // 5: Texto
                "\"TIPO_PAGO\" TEXT);"); // 6: TipoPago
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIPO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TIPO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdTipo());
 
        String Color = entity.getColor();
        if (Color != null) {
            stmt.bindString(3, Color);
        }
 
        String Icono = entity.getIcono();
        if (Icono != null) {
            stmt.bindString(4, Icono);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(5, Nombre);
        }
 
        String Texto = entity.getTexto();
        if (Texto != null) {
            stmt.bindString(6, Texto);
        }
 
        String TipoPago = entity.getTipoPago();
        if (TipoPago != null) {
            stmt.bindString(7, TipoPago);
        }
    }

    @Override
    protected void attachEntity(TIPO entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TIPO readEntity(Cursor cursor, int offset) {
        TIPO entity = new TIPO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // IdTipo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Color
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Icono
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Nombre
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Texto
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // TipoPago
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TIPO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdTipo(cursor.getString(offset + 1));
        entity.setColor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcono(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTexto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTipoPago(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TIPO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TIPO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
