package pe.com.gmd.dokkuapp.domain.orm;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import pe.com.gmd.dokkuapp.domain.orm.RUTA;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RUTA".
*/
public class RUTADao extends AbstractDao<RUTA, Long> {

    public static final String TABLENAME = "RUTA";

    /**
     * Properties of entity RUTA.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "Nombre", false, "NOMBRE");
        public final static Property Direccion = new Property(2, String.class, "Direccion", false, "DIRECCION");
        public final static Property Origen = new Property(3, String.class, "Origen", false, "ORIGEN");
        public final static Property Destino = new Property(4, String.class, "Destino", false, "DESTINO");
        public final static Property Texto = new Property(5, String.class, "Texto", false, "TEXTO");
        public final static Property Dias = new Property(6, String.class, "Dias", false, "DIAS");
        public final static Property DesdeMA = new Property(7, Integer.class, "DesdeMA", false, "DESDE_MA");
        public final static Property HastaMA = new Property(8, Integer.class, "HastaMA", false, "HASTA_MA");
        public final static Property DesdeTA = new Property(9, Integer.class, "DesdeTA", false, "DESDE_TA");
        public final static Property HastaTA = new Property(10, Integer.class, "HastaTA", false, "HASTA_TA");
        public final static Property Frecuencia = new Property(11, Integer.class, "Frecuencia", false, "FRECUENCIA");
        public final static Property TiempoAproximado = new Property(12, Boolean.class, "TiempoAproximado", false, "TIEMPO_APROXIMADO");
        public final static Property Estado = new Property(13, Boolean.class, "Estado", false, "ESTADO");
        public final static Property Tipo_id = new Property(14, long.class, "tipo_id", false, "TIPO_ID");
    };

    private DaoSession daoSession;

    private Query<RUTA> tIPO_Fk_rutasQuery;

    public RUTADao(DaoConfig config) {
        super(config);
    }
    
    public RUTADao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RUTA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT," + // 1: Nombre
                "\"DIRECCION\" TEXT," + // 2: Direccion
                "\"ORIGEN\" TEXT," + // 3: Origen
                "\"DESTINO\" TEXT," + // 4: Destino
                "\"TEXTO\" TEXT," + // 5: Texto
                "\"DIAS\" TEXT," + // 6: Dias
                "\"DESDE_MA\" INTEGER," + // 7: DesdeMA
                "\"HASTA_MA\" INTEGER," + // 8: HastaMA
                "\"DESDE_TA\" INTEGER," + // 9: DesdeTA
                "\"HASTA_TA\" INTEGER," + // 10: HastaTA
                "\"FRECUENCIA\" INTEGER," + // 11: Frecuencia
                "\"TIEMPO_APROXIMADO\" INTEGER," + // 12: TiempoAproximado
                "\"ESTADO\" INTEGER," + // 13: Estado
                "\"TIPO_ID\" INTEGER NOT NULL );"); // 14: tipo_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RUTA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RUTA entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Nombre = entity.getNombre();
        if (Nombre != null) {
            stmt.bindString(2, Nombre);
        }
 
        String Direccion = entity.getDireccion();
        if (Direccion != null) {
            stmt.bindString(3, Direccion);
        }
 
        String Origen = entity.getOrigen();
        if (Origen != null) {
            stmt.bindString(4, Origen);
        }
 
        String Destino = entity.getDestino();
        if (Destino != null) {
            stmt.bindString(5, Destino);
        }
 
        String Texto = entity.getTexto();
        if (Texto != null) {
            stmt.bindString(6, Texto);
        }
 
        String Dias = entity.getDias();
        if (Dias != null) {
            stmt.bindString(7, Dias);
        }
 
        Integer DesdeMA = entity.getDesdeMA();
        if (DesdeMA != null) {
            stmt.bindLong(8, DesdeMA);
        }
 
        Integer HastaMA = entity.getHastaMA();
        if (HastaMA != null) {
            stmt.bindLong(9, HastaMA);
        }
 
        Integer DesdeTA = entity.getDesdeTA();
        if (DesdeTA != null) {
            stmt.bindLong(10, DesdeTA);
        }
 
        Integer HastaTA = entity.getHastaTA();
        if (HastaTA != null) {
            stmt.bindLong(11, HastaTA);
        }
 
        Integer Frecuencia = entity.getFrecuencia();
        if (Frecuencia != null) {
            stmt.bindLong(12, Frecuencia);
        }
 
        Boolean TiempoAproximado = entity.getTiempoAproximado();
        if (TiempoAproximado != null) {
            stmt.bindLong(13, TiempoAproximado ? 1L: 0L);
        }
 
        Boolean Estado = entity.getEstado();
        if (Estado != null) {
            stmt.bindLong(14, Estado ? 1L: 0L);
        }
        stmt.bindLong(15, entity.getTipo_id());
    }

    @Override
    protected void attachEntity(RUTA entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RUTA readEntity(Cursor cursor, int offset) {
        RUTA entity = new RUTA( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Nombre
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Direccion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Origen
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Destino
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Texto
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Dias
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // DesdeMA
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // HastaMA
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // DesdeTA
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // HastaTA
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Frecuencia
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // TiempoAproximado
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // Estado
            cursor.getLong(offset + 14) // tipo_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RUTA entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDireccion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrigen(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDestino(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTexto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDias(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDesdeMA(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHastaMA(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDesdeTA(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHastaTA(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFrecuencia(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTiempoAproximado(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setEstado(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setTipo_id(cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RUTA entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RUTA entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fk_rutas" to-many relationship of TIPO. */
    public List<RUTA> _queryTIPO_Fk_rutas(long tipo_id) {
        synchronized (this) {
            if (tIPO_Fk_rutasQuery == null) {
                QueryBuilder<RUTA> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Tipo_id.eq(null));
                tIPO_Fk_rutasQuery = queryBuilder.build();
            }
        }
        Query<RUTA> query = tIPO_Fk_rutasQuery.forCurrentThread();
        query.setParameter(0, tipo_id);
        return query.list();
    }

}
